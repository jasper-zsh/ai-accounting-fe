/* tslint:disable */
/* eslint-disable */
/**
 * AI Accounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface V1ChatCompletionsPostRequest {
    body?: object;
}

/**
 * OpenAIApi - interface
 * 
 * @export
 * @interface OpenAIApiInterface
 */
export interface OpenAIApiInterface {
    /**
     * 
     * @summary Chat Completions
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAIApiInterface
     */
    v1ChatCompletionsPostRaw(requestParameters: V1ChatCompletionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * 
     * Chat Completions
     */
    v1ChatCompletionsPost(requestParameters: V1ChatCompletionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class OpenAIApi extends runtime.BaseAPI implements OpenAIApiInterface {

    /**
     * 
     * Chat Completions
     */
    async v1ChatCompletionsPostRaw(requestParameters: V1ChatCompletionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/chat/completions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * Chat Completions
     */
    async v1ChatCompletionsPost(requestParameters: V1ChatCompletionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.v1ChatCompletionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
