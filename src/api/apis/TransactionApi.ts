/* tslint:disable */
/* eslint-disable */
/**
 * AI Accounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Page,
  Transaction,
  TransactionsGroupByPost401Response,
  TransactionsGroupByPostRequest,
  TransactionsPagePostRequest,
} from '../models/index';
import {
    PageFromJSON,
    PageToJSON,
    TransactionFromJSON,
    TransactionToJSON,
    TransactionsGroupByPost401ResponseFromJSON,
    TransactionsGroupByPost401ResponseToJSON,
    TransactionsGroupByPostRequestFromJSON,
    TransactionsGroupByPostRequestToJSON,
    TransactionsPagePostRequestFromJSON,
    TransactionsPagePostRequestToJSON,
} from '../models/index';

export interface TransactionsGroupByPostOperationRequest {
    transactionsGroupByPostRequest?: TransactionsGroupByPostRequest;
}

export interface TransactionsPagePostOperationRequest {
    limit?: number;
    page?: number;
    transactionsPagePostRequest?: TransactionsPagePostRequest;
}

export interface TransactionsPostRequest {
    body?: object;
}

/**
 * TransactionApi - interface
 * 
 * @export
 * @interface TransactionApiInterface
 */
export interface TransactionApiInterface {
    /**
     * 
     * @summary Group Transactions
     * @param {TransactionsGroupByPostRequest} [transactionsGroupByPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    transactionsGroupByPostRaw(requestParameters: TransactionsGroupByPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Group Transactions
     */
    transactionsGroupByPost(requestParameters: TransactionsGroupByPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Paginate Transactions
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {TransactionsPagePostRequest} [transactionsPagePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    transactionsPagePostRaw(requestParameters: TransactionsPagePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * 
     * Paginate Transactions
     */
    transactionsPagePost(requestParameters: TransactionsPagePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * 
     * @summary Create Transaction
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    transactionsPostRaw(requestParameters: TransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * 
     * Create Transaction
     */
    transactionsPost(requestParameters: TransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI implements TransactionApiInterface {

    /**
     * 
     * Group Transactions
     */
    async transactionsGroupByPostRaw(requestParameters: TransactionsGroupByPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/group-by`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsGroupByPostRequestToJSON(requestParameters.transactionsGroupByPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Group Transactions
     */
    async transactionsGroupByPost(requestParameters: TransactionsGroupByPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transactionsGroupByPostRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Paginate Transactions
     */
    async transactionsPagePostRaw(requestParameters: TransactionsPagePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionsPagePostRequestToJSON(requestParameters.transactionsPagePostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * 
     * Paginate Transactions
     */
    async transactionsPagePost(requestParameters: TransactionsPagePostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.transactionsPagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Create Transaction
     */
    async transactionsPostRaw(requestParameters: TransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * 
     * Create Transaction
     */
    async transactionsPost(requestParameters: TransactionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.transactionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
