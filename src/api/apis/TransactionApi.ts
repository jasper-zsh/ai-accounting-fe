/* tslint:disable */
/* eslint-disable */
/**
 * AI Accounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupTransactionsRequest,
  Page,
  PaginateTransactionsRequest,
  Transaction,
  TransactionGroupResult,
  TransactionUpdate,
} from '../models/index';
import {
    GroupTransactionsRequestFromJSON,
    GroupTransactionsRequestToJSON,
    PageFromJSON,
    PageToJSON,
    PaginateTransactionsRequestFromJSON,
    PaginateTransactionsRequestToJSON,
    TransactionFromJSON,
    TransactionToJSON,
    TransactionGroupResultFromJSON,
    TransactionGroupResultToJSON,
    TransactionUpdateFromJSON,
    TransactionUpdateToJSON,
} from '../models/index';

export interface CreateTransactionRequest {
    body?: object;
}

export interface DeleteTransactionRequest {
    id: string;
}

export interface GetTransactionRequest {
    id: string;
}

export interface GroupTransactionsOperationRequest {
    groupTransactionsRequest?: GroupTransactionsRequest;
}

export interface PaginateTransactionsOperationRequest {
    limit?: number;
    page?: number;
    paginateTransactionsRequest?: PaginateTransactionsRequest;
}

export interface UpdateTransactionRequest {
    id: string;
    transactionUpdate?: TransactionUpdate;
}

/**
 * TransactionApi - interface
 * 
 * @export
 * @interface TransactionApiInterface
 */
export interface TransactionApiInterface {
    /**
     * 
     * @summary Create Transaction
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    createTransactionRaw(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * 
     * Create Transaction
     */
    createTransaction(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * 
     * @summary Delete Transaction
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * 
     * Delete Transaction
     */
    deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * 
     * @summary Get Transaction
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * 
     * Get Transaction
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * 
     * @summary Group Transactions
     * @param {GroupTransactionsRequest} [groupTransactionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    groupTransactionsRaw(requestParameters: GroupTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionGroupResult>>>;

    /**
     * 
     * Group Transactions
     */
    groupTransactions(requestParameters: GroupTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionGroupResult>>;

    /**
     * 
     * @summary Paginate Transactions
     * @param {number} [limit] 
     * @param {number} [page] 
     * @param {PaginateTransactionsRequest} [paginateTransactionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    paginateTransactionsRaw(requestParameters: PaginateTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * 
     * Paginate Transactions
     */
    paginateTransactions(requestParameters: PaginateTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * 
     * @summary Update Transaction
     * @param {string} id 
     * @param {TransactionUpdate} [transactionUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * 
     * Update Transaction
     */
    updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI implements TransactionApiInterface {

    /**
     * 
     * Create Transaction
     */
    async createTransactionRaw(requestParameters: CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * 
     * Create Transaction
     */
    async createTransaction(requestParameters: CreateTransactionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.createTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete Transaction
     */
    async deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/data/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * 
     * Delete Transaction
     */
    async deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.deleteTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Transaction
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/data/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * 
     * Get Transaction
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Group Transactions
     */
    async groupTransactionsRaw(requestParameters: GroupTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionGroupResult>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/query/group-by`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupTransactionsRequestToJSON(requestParameters.groupTransactionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionGroupResultFromJSON));
    }

    /**
     * 
     * Group Transactions
     */
    async groupTransactions(requestParameters: GroupTransactionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionGroupResult>> {
        const response = await this.groupTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Paginate Transactions
     */
    async paginateTransactionsRaw(requestParameters: PaginateTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/query/page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginateTransactionsRequestToJSON(requestParameters.paginateTransactionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * 
     * Paginate Transactions
     */
    async paginateTransactions(requestParameters: PaginateTransactionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.paginateTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update Transaction
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions/data/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionUpdateToJSON(requestParameters.transactionUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * 
     * Update Transaction
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
