/* tslint:disable */
/* eslint-disable */
/**
 * AI Accounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './Account';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
} from './Category';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    time: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    updatedAt: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    categoryId?: number;
    /**
     * 
     * @type {Category}
     * @memberof Transaction
     */
    category?: Category;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    accountId?: number;
    /**
     * 
     * @type {Account}
     * @memberof Transaction
     */
    account?: Account;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    comment?: string;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'type': json['type'],
        'amount': json['amount'],
        'time': json['time'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'category': !exists(json, 'category') ? undefined : CategoryFromJSON(json['category']),
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'account': !exists(json, 'account') ? undefined : AccountFromJSON(json['account']),
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'type': value.type,
        'amount': value.amount,
        'time': value.time,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'categoryId': value.categoryId,
        'category': CategoryToJSON(value.category),
        'accountId': value.accountId,
        'account': AccountToJSON(value.account),
        'comment': value.comment,
    };
}

