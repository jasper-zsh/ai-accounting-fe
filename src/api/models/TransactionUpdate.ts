/* tslint:disable */
/* eslint-disable */
/**
 * AI Accounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
} from './TransactionType';

/**
 * 
 * @export
 * @interface TransactionUpdate
 */
export interface TransactionUpdate {
    /**
     * 
     * @type {number}
     * @memberof TransactionUpdate
     */
    accountId?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionUpdate
     */
    categoryId?: number;
    /**
     * 
     * @type {TransactionType}
     * @memberof TransactionUpdate
     */
    type?: TransactionType;
    /**
     * 
     * @type {number}
     * @memberof TransactionUpdate
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionUpdate
     */
    comment?: string;
}

/**
 * Check if a given object implements the TransactionUpdate interface.
 */
export function instanceOfTransactionUpdate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionUpdateFromJSON(json: any): TransactionUpdate {
    return TransactionUpdateFromJSONTyped(json, false);
}

export function TransactionUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'type': !exists(json, 'type') ? undefined : TransactionTypeFromJSON(json['type']),
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function TransactionUpdateToJSON(value?: TransactionUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': value.accountId,
        'categoryId': value.categoryId,
        'type': TransactionTypeToJSON(value.type),
        'amount': value.amount,
        'comment': value.comment,
    };
}

